// Code generated by MockGen. DO NOT EDIT.
// Source: service.go

// Package mock_service is a generated GoMock package.
package mock_service

import (
	entity "Fitness_REST_API/internal/entity"
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockAdmin is a mock of Admin interface.
type MockAdmin struct {
	ctrl     *gomock.Controller
	recorder *MockAdminMockRecorder
}

// MockAdminMockRecorder is the mock recorder for MockAdmin.
type MockAdminMockRecorder struct {
	mock *MockAdmin
}

// NewMockAdmin creates a new mock instance.
func NewMockAdmin(ctrl *gomock.Controller) *MockAdmin {
	mock := &MockAdmin{ctrl: ctrl}
	mock.recorder = &MockAdminMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockAdmin) EXPECT() *MockAdminMockRecorder {
	return m.recorder
}

// ParseToken mocks base method.
func (m *MockAdmin) ParseToken(token string) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(error)
	return ret0
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockAdminMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockAdmin)(nil).ParseToken), token)
}

// SignIn mocks base method.
func (m *MockAdmin) SignIn(login, passwordHash string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", login, passwordHash)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockAdminMockRecorder) SignIn(login, passwordHash interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockAdmin)(nil).SignIn), login, passwordHash)
}

// MockUser is a mock of User interface.
type MockUser struct {
	ctrl     *gomock.Controller
	recorder *MockUserMockRecorder
}

// MockUserMockRecorder is the mock recorder for MockUser.
type MockUserMockRecorder struct {
	mock *MockUser
}

// NewMockUser creates a new mock instance.
func NewMockUser(ctrl *gomock.Controller) *MockUser {
	mock := &MockUser{ctrl: ctrl}
	mock.recorder = &MockUserMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockUser) EXPECT() *MockUserMockRecorder {
	return m.recorder
}

// AcceptRequest mocks base method.
func (m *MockUser) AcceptRequest(trainerId, requestId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "AcceptRequest", trainerId, requestId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// AcceptRequest indicates an expected call of AcceptRequest.
func (mr *MockUserMockRecorder) AcceptRequest(trainerId, requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "AcceptRequest", reflect.TypeOf((*MockUser)(nil).AcceptRequest), trainerId, requestId)
}

// CreateWorkoutAsTrainer mocks base method.
func (m *MockUser) CreateWorkoutAsTrainer(workout *entity.Workout) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkoutAsTrainer", workout)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkoutAsTrainer indicates an expected call of CreateWorkoutAsTrainer.
func (mr *MockUserMockRecorder) CreateWorkoutAsTrainer(workout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkoutAsTrainer", reflect.TypeOf((*MockUser)(nil).CreateWorkoutAsTrainer), workout)
}

// CreateWorkoutAsUser mocks base method.
func (m *MockUser) CreateWorkoutAsUser(workout *entity.Workout) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateWorkoutAsUser", workout)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateWorkoutAsUser indicates an expected call of CreateWorkoutAsUser.
func (mr *MockUserMockRecorder) CreateWorkoutAsUser(workout interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateWorkoutAsUser", reflect.TypeOf((*MockUser)(nil).CreateWorkoutAsUser), workout)
}

// DeleteWorkout mocks base method.
func (m *MockUser) DeleteWorkout(workoutId, userId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteWorkout", workoutId, userId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteWorkout indicates an expected call of DeleteWorkout.
func (mr *MockUserMockRecorder) DeleteWorkout(workoutId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteWorkout", reflect.TypeOf((*MockUser)(nil).DeleteWorkout), workoutId, userId)
}

// DenyRequest mocks base method.
func (m *MockUser) DenyRequest(trainerId, requestId int64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DenyRequest", trainerId, requestId)
	ret0, _ := ret[0].(error)
	return ret0
}

// DenyRequest indicates an expected call of DenyRequest.
func (mr *MockUserMockRecorder) DenyRequest(trainerId, requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DenyRequest", reflect.TypeOf((*MockUser)(nil).DenyRequest), trainerId, requestId)
}

// EndPartnershipWithTrainer mocks base method.
func (m *MockUser) EndPartnershipWithTrainer(trainerId, userId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndPartnershipWithTrainer", trainerId, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndPartnershipWithTrainer indicates an expected call of EndPartnershipWithTrainer.
func (mr *MockUserMockRecorder) EndPartnershipWithTrainer(trainerId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndPartnershipWithTrainer", reflect.TypeOf((*MockUser)(nil).EndPartnershipWithTrainer), trainerId, userId)
}

// EndPartnershipWithUser mocks base method.
func (m *MockUser) EndPartnershipWithUser(trainerId, userId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EndPartnershipWithUser", trainerId, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EndPartnershipWithUser indicates an expected call of EndPartnershipWithUser.
func (mr *MockUserMockRecorder) EndPartnershipWithUser(trainerId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EndPartnershipWithUser", reflect.TypeOf((*MockUser)(nil).EndPartnershipWithUser), trainerId, userId)
}

// GetTrainerById mocks base method.
func (m *MockUser) GetTrainerById(id int64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrainerById", id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrainerById indicates an expected call of GetTrainerById.
func (mr *MockUserMockRecorder) GetTrainerById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrainerById", reflect.TypeOf((*MockUser)(nil).GetTrainerById), id)
}

// GetTrainerRequestById mocks base method.
func (m *MockUser) GetTrainerRequestById(trainerId, requestId int64) (*entity.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrainerRequestById", trainerId, requestId)
	ret0, _ := ret[0].(*entity.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrainerRequestById indicates an expected call of GetTrainerRequestById.
func (mr *MockUserMockRecorder) GetTrainerRequestById(trainerId, requestId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrainerRequestById", reflect.TypeOf((*MockUser)(nil).GetTrainerRequestById), trainerId, requestId)
}

// GetTrainerRequests mocks base method.
func (m *MockUser) GetTrainerRequests(trainerId int64) ([]*entity.Request, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrainerRequests", trainerId)
	ret0, _ := ret[0].([]*entity.Request)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrainerRequests indicates an expected call of GetTrainerRequests.
func (mr *MockUserMockRecorder) GetTrainerRequests(trainerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrainerRequests", reflect.TypeOf((*MockUser)(nil).GetTrainerRequests), trainerId)
}

// GetTrainerUserById mocks base method.
func (m *MockUser) GetTrainerUserById(trainerId, userId int64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrainerUserById", trainerId, userId)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrainerUserById indicates an expected call of GetTrainerUserById.
func (mr *MockUserMockRecorder) GetTrainerUserById(trainerId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrainerUserById", reflect.TypeOf((*MockUser)(nil).GetTrainerUserById), trainerId, userId)
}

// GetTrainerUsers mocks base method.
func (m *MockUser) GetTrainerUsers(trainerId int64) ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrainerUsers", trainerId)
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrainerUsers indicates an expected call of GetTrainerUsers.
func (mr *MockUserMockRecorder) GetTrainerUsers(trainerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrainerUsers", reflect.TypeOf((*MockUser)(nil).GetTrainerUsers), trainerId)
}

// GetTrainerWorkouts mocks base method.
func (m *MockUser) GetTrainerWorkouts(trainerId int64) ([]*entity.Workout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrainerWorkouts", trainerId)
	ret0, _ := ret[0].([]*entity.Workout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrainerWorkouts indicates an expected call of GetTrainerWorkouts.
func (mr *MockUserMockRecorder) GetTrainerWorkouts(trainerId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrainerWorkouts", reflect.TypeOf((*MockUser)(nil).GetTrainerWorkouts), trainerId)
}

// GetTrainerWorkoutsWithUser mocks base method.
func (m *MockUser) GetTrainerWorkoutsWithUser(trainerId, userId int64) ([]*entity.Workout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrainerWorkoutsWithUser", trainerId, userId)
	ret0, _ := ret[0].([]*entity.Workout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrainerWorkoutsWithUser indicates an expected call of GetTrainerWorkoutsWithUser.
func (mr *MockUserMockRecorder) GetTrainerWorkoutsWithUser(trainerId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrainerWorkoutsWithUser", reflect.TypeOf((*MockUser)(nil).GetTrainerWorkoutsWithUser), trainerId, userId)
}

// GetTrainers mocks base method.
func (m *MockUser) GetTrainers() ([]*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetTrainers")
	ret0, _ := ret[0].([]*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetTrainers indicates an expected call of GetTrainers.
func (mr *MockUserMockRecorder) GetTrainers() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetTrainers", reflect.TypeOf((*MockUser)(nil).GetTrainers))
}

// GetUserInfoById mocks base method.
func (m *MockUser) GetUserInfoById(id int64) (*entity.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserInfoById", id)
	ret0, _ := ret[0].(*entity.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserInfoById indicates an expected call of GetUserInfoById.
func (mr *MockUserMockRecorder) GetUserInfoById(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserInfoById", reflect.TypeOf((*MockUser)(nil).GetUserInfoById), id)
}

// GetUserPartnerships mocks base method.
func (m *MockUser) GetUserPartnerships(userId int64) ([]*entity.Partnership, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserPartnerships", userId)
	ret0, _ := ret[0].([]*entity.Partnership)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserPartnerships indicates an expected call of GetUserPartnerships.
func (mr *MockUserMockRecorder) GetUserPartnerships(userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserPartnerships", reflect.TypeOf((*MockUser)(nil).GetUserPartnerships), userId)
}

// GetUserWorkouts mocks base method.
func (m *MockUser) GetUserWorkouts(id int64) ([]*entity.Workout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUserWorkouts", id)
	ret0, _ := ret[0].([]*entity.Workout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUserWorkouts indicates an expected call of GetUserWorkouts.
func (mr *MockUserMockRecorder) GetUserWorkouts(id interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUserWorkouts", reflect.TypeOf((*MockUser)(nil).GetUserWorkouts), id)
}

// GetWorkoutById mocks base method.
func (m *MockUser) GetWorkoutById(workoutId, userId int64) (*entity.Workout, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkoutById", workoutId, userId)
	ret0, _ := ret[0].(*entity.Workout)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkoutById indicates an expected call of GetWorkoutById.
func (mr *MockUserMockRecorder) GetWorkoutById(workoutId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkoutById", reflect.TypeOf((*MockUser)(nil).GetWorkoutById), workoutId, userId)
}

// InitPartnershipWithUser mocks base method.
func (m *MockUser) InitPartnershipWithUser(trainerId, userId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "InitPartnershipWithUser", trainerId, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// InitPartnershipWithUser indicates an expected call of InitPartnershipWithUser.
func (mr *MockUserMockRecorder) InitPartnershipWithUser(trainerId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "InitPartnershipWithUser", reflect.TypeOf((*MockUser)(nil).InitPartnershipWithUser), trainerId, userId)
}

// ParseToken mocks base method.
func (m *MockUser) ParseToken(token string) (int64, string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ParseToken", token)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(string)
	ret2, _ := ret[2].(error)
	return ret0, ret1, ret2
}

// ParseToken indicates an expected call of ParseToken.
func (mr *MockUserMockRecorder) ParseToken(token interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ParseToken", reflect.TypeOf((*MockUser)(nil).ParseToken), token)
}

// SendRequestToTrainer mocks base method.
func (m *MockUser) SendRequestToTrainer(trainerId, userId int64) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SendRequestToTrainer", trainerId, userId)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SendRequestToTrainer indicates an expected call of SendRequestToTrainer.
func (mr *MockUserMockRecorder) SendRequestToTrainer(trainerId, userId interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SendRequestToTrainer", reflect.TypeOf((*MockUser)(nil).SendRequestToTrainer), trainerId, userId)
}

// SignIn mocks base method.
func (m *MockUser) SignIn(email, passwordHash, role string) (string, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignIn", email, passwordHash, role)
	ret0, _ := ret[0].(string)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignIn indicates an expected call of SignIn.
func (mr *MockUserMockRecorder) SignIn(email, passwordHash, role interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignIn", reflect.TypeOf((*MockUser)(nil).SignIn), email, passwordHash, role)
}

// SignUp mocks base method.
func (m *MockUser) SignUp(user *entity.User) (int64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "SignUp", user)
	ret0, _ := ret[0].(int64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// SignUp indicates an expected call of SignUp.
func (mr *MockUserMockRecorder) SignUp(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "SignUp", reflect.TypeOf((*MockUser)(nil).SignUp), user)
}

// UpdateWorkout mocks base method.
func (m *MockUser) UpdateWorkout(workoutId, userId int64, update *entity.UpdateWorkout) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateWorkout", workoutId, userId, update)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateWorkout indicates an expected call of UpdateWorkout.
func (mr *MockUserMockRecorder) UpdateWorkout(workoutId, userId, update interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateWorkout", reflect.TypeOf((*MockUser)(nil).UpdateWorkout), workoutId, userId, update)
}
